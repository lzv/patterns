Паттерн Посетитель инкапсулирует алгоритмы операций классов. Если есть некая иерархия классов элементов, которая меняется редко, но при этом часто меняются их методы, то алгоритмы в методах можно вынести в отдельную иерархию классов посетителя. Тогда для добавления нового алгоритма нужно будет просто добавить новый подкласс посетителя. Но есть и обратная сторона - при добавлении нового класса элемента придется модифицировать всю иерархию классов посетителя. Поэтому посетителя следует применять, если алгоритмы меняются чаще структуры классов элементов. Иначе будет удобней реализовать алгоритмы как методы классов элементов. 
Посетитель похож на паттерн Стратегия - объект посетителя передается в объект элемента, затем посетитель выполняет действия с объектом элемента. Но стратегия передается в корень иерархии и работает со всей иерархией, тогда как посетитель передается в каждый объект, с которым работает. Из этого следует, что здесь так же может применяться паттерн Итератор.
Еще одно коренное отличие Стратегии от Посетителя в том, что стратегия применяется к объектам, имеющим один и тот же интерфейс, и может использовать методы только этого интерфейса. Тогда как Посетитель может посещать совершенно различные объекты без одинаковых родительских интерфейсов, и может использовать методы конкретно того класса, которому принадлежит объект.
