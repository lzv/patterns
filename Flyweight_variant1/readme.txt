Паттерн Приспособленец можно применять, если система удовлетворяет следующим условиям: в приложении используется большое количество объектов, что занимает много памяти; состояние объектов можно разделить на внутреннее (содержимое) и внешнее (контекст); количество видов объектов значительно меньше, чем количество самих объектов; в системе не используется проверка равенства объектов. 
В этом случае можно применить паттерн, который состоит в следующем: состояние объекта разделяется на содержимое и контекст; создается группа классов, хранящих в себе содержимое, а контекст передается как параметры методов; затем на каждый вид объекта создается один объект и помещается в хранилище приспособленцев (можно создавать не сразу, а только при первом запросе от системы); когда системе требуется объект определенного вида, то вместо его создания возвращается ссылка на уже существующий объект.
Пример такой системы - текстовый редактор. Приспособленец - это объект, хранящий в себе код символа и способный себя нарисовать. Код символа - это содержимое, а размер и шрифт, которые передаются в метод отрисовки - это контекст. Вместо сотен тысяч объектов на все буквы, будут использоваться указатели всего на несколько десятков объектов, что даст сильную экономию памяти.
Следует учитывать, что так как объекты разделяются, проверка равенства вроде бы разных объектов, но одного типа, вернет истину. 
То, что классы-приспособленцы разделяются, не запрещает создавать наследников от того же интерфейса, которые не будут разделяться. 

Этот пример кода - мой первый вариант реализации паттерна. Простой, все умещается в одном классе. Однако, избежав большого количества самих объектов Symbol, приходится создавать большое количество объектов shared_ptr. Если объект shared_ptr занимает меньше памяти, это уже лучше, но можно сделать еще лучше. Смотрите второй вариант. 